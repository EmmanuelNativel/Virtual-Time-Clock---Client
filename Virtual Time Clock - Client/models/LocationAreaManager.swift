//
//  LocationAreaManager.swift
//  Virtual Time Clock - Client
//
//  Created by Emmanuel Nativel on 11/21/19.
//  Copyright ¬© 2019 Emmanuel Nativel. All rights reserved.
//

import Foundation
import CoreLocation
import Firebase

class LocationAreaManager: NSObject{
    
    static let shared = LocationAreaManager()
    
    let manager = CLLocationManager()       // location Manager global √† l'applciation
    let database = Firestore.firestore()    // base de donn√©es
    var currentArea: CLCircularRegion?      // Zone de proximit√© √† "monitorer"
    var userID: String = ""                 // id user
    var mission: Mission?                   // mission courrante
    var currentPosition: CLLocation?        // position courante
    
    override init(){
        super.init()
        manager.delegate = self                                     // Lien avec le delegate
        manager.desiredAccuracy = kCLLocationAccuracyBest           // Pr√©cision de la g√©olocalisation
        manager.allowsBackgroundLocationUpdates = true              // On autorise la g√©olocalisation en tache de fond
        manager.pausesLocationUpdatesAutomatically = true           // La g√©olocalisation peut se mettre en pause
        manager.activityType = .other                               // On indique le type d'utilisation de la g√©olocalisation
    }
    
    
    // Lancement du monitoring pour la zone en param√®tre
    func startMonitoringForNewArea(newArea:CLCircularRegion){
        // Si il y a d√©j√† une mission en cours de minitoring, on la stop
        if currentArea != nil && userID != "" && mission != nil {
            manager.stopMonitoring(for: currentArea!)
            notifyExitToDB()    // On annonce √† la BD que l'employ√© ne pointe plus sur cette mission
        }
        // On lance le monitoring sur la nouvelle zone
        manager.startMonitoring(for: newArea)
        currentArea = newArea
        print("‚úÖ La zone a √©t√© modifi√©e")
    }
    
    // Param√©trage
    func setupManager(){
        manager.requestAlwaysAuthorization()    // Demande d'autorisation
        manager.startUpdatingLocation()         // D√©but du relever de pisitions
    }
    
    // Notifier √† la base de donn√©es que l'employ√© est sorti de la mission courrante
    private func notifyExitToDB(){
        if userID != "" && mission != nil {
            print("‚ÑπÔ∏è Notification de sortie envoy√©e √† la BD")
            database.collection("pointage").document(mission!.id).collection("pointageMission").document(userID).setData(
                [
                    "date" : Timestamp(date: Date()), // On enregistre √©galement la date courante
                    "estPresent" : false
                ]
            )
        }
    }
    
    // Notifier √† la base de donn√©es que l'employ√© est entr√© dans la mission courrante
    private func notifyEnterToDB(){
           if userID != "" && mission != nil  {
               print("‚ÑπÔ∏è Notification d'entr√©e envoy√©e √† la BD")
               database.collection("pointage").document(mission!.id).collection("pointageMission").document(userID).setData(
                   [
                       "date" : Timestamp(date: Date()), // On enregistre √©galement la date courante
                       "estPresent" : true
                   ]
               )
           }
    }
    
    // Lancement du pointage automatique, si l'employ√© est dans la zone
    func isUserInArea(area:CLCircularRegion, userId: String, mission: Mission) -> Bool {
        // On test si l'employ√© est dans la zone
        if currentPosition != nil && area.contains(CLLocationCoordinate2DMake((currentPosition?.coordinate.latitude)!, (currentPosition?.coordinate.longitude)!)) {
            self.userID = userId    // On indique l'employ√© actuel
            self.mission = mission  // On indique la mission actuelle
            self.startMonitoringForNewArea(newArea: area)   // On commence le monitoring pour la nouvelle zone
            notifyEnterToDB()   // On notifi la BD que l'employ√© a point√©
            return true
        } else {
            return false
        }
    }
    
    
    // Arr√™ter la d√©tection
    func stopLocationUpdate(){
        manager.stopUpdatingLocation()
    }
    
    // A appeler quand on quitte l'application ! Pour stopper compl√®tement
    func stopMonitoring(){
        if currentArea != nil {
            notifyExitToDB()
            manager.stopMonitoring(for: currentArea!)
        }
    }
    
}

extension LocationAreaManager: CLLocationManagerDelegate {
    
    // Fonction appell√©e quand on commence √† d√©tecter les entr√©es et sorties dans la zone de la mission
    func locationManager(_ manager: CLLocationManager, didStartMonitoringFor region: CLRegion) {
        print("üß≠ Lancement du contr√¥le de pr√©sence")
    }
    
    // Fonction appell√©e quand l'employ√© entre dans la zone de la mission
    func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {
        // Mise √† jour du pointage dans la base de donn√©es
        notifyEnterToDB()
    }
    
    // Fonction appell√©e quand l'employ√© sort de la zone de la mission
    func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {
        // Mise √† jour du pointage dans la base de donn√©es
        notifyExitToDB()
    }
    
    // D√©tection d'erreur
    func locationManager(_ manager: CLLocationManager, monitoringDidFailFor region: CLRegion?, withError error: Error) {
        print("üß≠‚õîÔ∏è Erreur de monitoring : \(error)")
    }
    
    // Check de la permission obtenue
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        if status == .authorizedAlways {
            print(" üî• Permission Always obtenue ! ")
        }
        if status == .authorizedWhenInUse {
            print(" üî• Permission WhenInUse obtenue ! ")
        }
        if status == .denied {
            print(" üî• La permission a √©t√© refus√©e ! ")
        }
        if status == .notDetermined {
            print(" üî• La statut de la permission est inconnu ! ")
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        if let lastLocation = locations.last {
            currentPosition = lastLocation  // On r√©cup√®re la position courrante
        }
    }
    
}


